1. 개발자가 new를 이용해서 객체를 생성하는 능동적 프로그래밍이 아니라, 스프링 프레임워크는 객체를 필요할 때
   스프링이 생성해준다
   - 스프링 빈(bean) : 스프링이 생성한 객체(작업하는 클래스. Singleton으로 관리)
                      @Controller를 비롯한 어노테이션이 지정된 클래스들
   - 값을 저장하는 객체(VO, Value Object)는 스프링이 생성하지 않는다

2. Command 객체(디자인 패턴 이름)
   - 사용자가 입력한 값을 담은 VO
   - 스프링은 사용자가 입력한 값을 처리해준다
     ex) username=spring&password=1234로 입력했을 때
     username과 password를 별개의 변수로 받으려면
          @RequestParam String username, @RequestParam String password
     1개의 객체로 받으려면
          @ModelAttribute Member member

3. @ModelAttribute이 동작하기 위한 VO 조건
    - 기본 생성자가 있어야 한다
    - setter가 있어야 한다

4. xml과 html의 차이
    - html은 표준 요소와 속성을 사용
    - xml은 사용자 정의 요소와 속성을 사용한다
      xml의 경우 요소/속성 이름이 충돌할 수 있다 -> xml들을 구별하는 패키지에 해당하는 것이 namespace

5. 스프링빈의 생명주기(lifecycle)
    - 스프링빈의 생성은 스프링 프레임워크가 담당(개발자는 생성자를 사용하지 않는다)
    - @PostConstruct가 지정된 메소드가 생성자 다음으로 실행된다(여기서 초기화)
    - @PreDestory가 지정된 메소드가 객체가 파괴될 때 실행된다(여기서 뒷정리)

6. HTTP는 stateless다
    - state(상태, 정보를 기억하는 것)
    - 요청을 보내면 작업 후 응답이 나온다 -> 작업을 기억하지 못한다
    - 요청이 접수되면 처리 결과를 타임리프에 전달해서 최종 html을 생성 후 응답
      요청 생성  -> 컨트롤러가 접수 -> 타임리프에 전달 : 여기까지가 하나의 작업
                                                    하나의 작업 내부에서 이동하는 것(forward) -> addObject
                                                    주소가 유지된다
    - redirect : 작업이 종료되면 새로운 작업으로 이동
                 주소가 변경된다
                 요청이 새로 만들어진다(기존 요청은 죽었다)

7. 요청의 수명은 하나의 작업
    - 작업이 마무리되면 요청 정보는 사라진다
    - 여러 요청들이 공유하는 정보(대표적으로 로그인) 는 어떻게 처리?
      상태를 어떻게 처리해야하지와 똑같은 질문
    - 상태를 처리하는 방법
        1. Cookie           사용자 웹브라우저에 저장           서버입장에서 가장 저렴. 보안성이 매우 취약        방문했던 링크와 같이 간단한 정보
                            예를 들어 사용자가 네이버에 접근 -> 네이버가 내 브라우저에 쿠키를 보낸다
                                                         -> 다음에 네이버에 접근할 때 모든 수신 쿠키는 자동 전송된다
        2. HttpSession      서버의 메모리                     로그인 정보. 일정시간 사용하지 않으면 사라진다
        3. DB               영구 저장

8. HttpSession 관리
    - 서버는 사용자 식별이 불가능 -> sessionid번호로 구별
    - 사용자                                        서버
                    --- 요청(쿠키) --->             sessionid 쿠키 확인
                    <---응답(sessionid) --         없는 경우 세션을 만들고 그 세션의 sessionid를 신규 발급
                    --- 요청(sessionid)-->         이제 모든 요청에는 sessionid가 포함되어 있다
                                                  사용자는 sessionid에 해당하는 세션에 접근할 수 있다
                                                  일정 시간 요청을 보내지 않을 경우 세션을 파괴(로그아웃 처리)

9. 요청에서 사용자 입력값을 스프링이 추출하기
   - ?username=spring&password=1234
   - username과 password를 분리해서 처리
     @RequestParam String username ,@Request String password
   - username과 password를 하나의 객체로 처리
     @Setter
     class Login {
        private String username;
        private String password;
     }
     ->
     @ModelAttribute Login login








